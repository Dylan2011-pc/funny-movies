{"ast":null,"code":"var _jsxFileName = \"/home/dylan/github.com/funny-movies/client/src/store/rootStore.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext } from 'react';\nimport { observable, action } from 'mobx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RootStoreContext = /*#__PURE__*/createContext(null);\nexport const RootStoreProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const rootStore = RootStore();\n  return /*#__PURE__*/_jsxDEV(RootStoreContext.Provider, {\n    value: rootStore,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = RootStoreProvider;\nexport const useRootStore = () => {\n  _s();\n  const rootStore = useContext(RootStoreContext);\n  if (!rootStore) {\n    throw new Error('MobX root store is not provided');\n  }\n  return rootStore;\n};\n_s(useRootStore, \"tr7ELGerQG8ttzZrINqKGXmyUEI=\");\nexport const RootStore = () => {\n  const store = observable({\n    userInfo: {},\n    setUserInfo: action(function (userInfo) {\n      store.userInfo = userInfo;\n    })\n  });\n  return store;\n};\n_c2 = RootStore;\nvar _c, _c2;\n$RefreshReg$(_c, \"RootStoreProvider\");\n$RefreshReg$(_c2, \"RootStore\");","map":{"version":3,"names":["createContext","useContext","observable","action","jsxDEV","_jsxDEV","RootStoreContext","RootStoreProvider","_ref","children","rootStore","RootStore","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRootStore","_s","Error","store","userInfo","setUserInfo","_c2","$RefreshReg$"],"sources":["/home/dylan/github.com/funny-movies/client/src/store/rootStore.js"],"sourcesContent":["import { createContext, useContext } from 'react';\nimport { observable, action } from 'mobx';\n\n\nexport const RootStoreContext = createContext(null);\n\nexport const RootStoreProvider = ({ children }) => {\n  const rootStore = RootStore();\n  return (\n    <RootStoreContext.Provider value={rootStore}>\n      {children}\n    </RootStoreContext.Provider>\n  );\n};\n\nexport const useRootStore = () => {\n  const rootStore = useContext(RootStoreContext);\n  if (!rootStore) {\n    throw new Error('MobX root store is not provided');\n  }\n  return rootStore;\n};\n\nexport const RootStore = () => {\n  const store = observable({\n    userInfo: {},\n    setUserInfo: action(function(userInfo) {\n\n      store.userInfo = userInfo;\n    })\n  });\n\n  return store;\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,UAAU,EAAEC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1C,OAAO,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEnD,OAAO,MAAMO,iBAAiB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAC5C,MAAME,SAAS,GAAGC,SAAS,EAAE;EAC7B,oBACEN,OAAA,CAACC,gBAAgB,CAACM,QAAQ;IAACC,KAAK,EAAEH,SAAU;IAAAD,QAAA,EACzCA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACiB;AAEhC,CAAC;AAACC,EAAA,GAPWX,iBAAiB;AAS9B,OAAO,MAAMY,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMV,SAAS,GAAGT,UAAU,CAACK,gBAAgB,CAAC;EAC9C,IAAI,CAACI,SAAS,EAAE;IACd,MAAM,IAAIW,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,OAAOX,SAAS;AAClB,CAAC;AAACU,EAAA,CANWD,YAAY;AAQzB,OAAO,MAAMR,SAAS,GAAGA,CAAA,KAAM;EAC7B,MAAMW,KAAK,GAAGpB,UAAU,CAAC;IACvBqB,QAAQ,EAAE,CAAC,CAAC;IACZC,WAAW,EAAErB,MAAM,CAAC,UAASoB,QAAQ,EAAE;MAErCD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;IAC3B,CAAC;EACH,CAAC,CAAC;EAEF,OAAOD,KAAK;AACd,CAAC;AAACG,GAAA,GAVWd,SAAS;AAAA,IAAAO,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}