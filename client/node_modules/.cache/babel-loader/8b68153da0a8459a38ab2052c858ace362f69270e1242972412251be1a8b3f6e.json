{"ast":null,"code":"var _jsxFileName = \"/home/dylan/github.com/funny-movies/client/src/store/rootStore.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext } from \"react\";\nimport { makeAutoObservable } from \"mobx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStoreContext = /*#__PURE__*/createContext();\nconst useRootStore = () => {\n  _s();\n  return useContext(RootStoreContext);\n};\n_s(useRootStore, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst createRootStore = () => {\n  return {\n    user: {\n      isLoggedIn: false,\n      setIsLoggedIn: value => {\n        this.isLoggedIn = value;\n      }\n    }\n  };\n};\nconst RootStoreProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const rootStore = createRootStore();\n  makeAutoObservable(rootStore);\n  return /*#__PURE__*/_jsxDEV(RootStoreContext.Provider, {\n    value: rootStore,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = RootStoreProvider;\nexport { useRootStore, RootStoreProvider };\nvar _c;\n$RefreshReg$(_c, \"RootStoreProvider\");","map":{"version":3,"names":["createContext","useContext","makeAutoObservable","jsxDEV","_jsxDEV","RootStoreContext","useRootStore","_s","createRootStore","user","isLoggedIn","setIsLoggedIn","value","RootStoreProvider","_ref","children","rootStore","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dylan/github.com/funny-movies/client/src/store/rootStore.js"],"sourcesContent":["import { createContext, useContext } from \"react\";\nimport { makeAutoObservable } from \"mobx\";\n\nconst RootStoreContext = createContext();\n\nconst useRootStore = () => useContext(RootStoreContext);\n\nconst createRootStore = () => {\n  return {\n    user: {\n      isLoggedIn: false,\n      setIsLoggedIn: (value) => {\n        this.isLoggedIn = value;\n      },\n    },\n  };\n};\n\nconst RootStoreProvider = ({ children }) => {\n  const rootStore = createRootStore();\n  makeAutoObservable(rootStore);\n\n  return (\n    <RootStoreContext.Provider value={rootStore}>\n      {children}\n    </RootStoreContext.Provider>\n  );\n};\n\nexport { useRootStore, RootStoreProvider };"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACjD,SAASC,kBAAkB,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,gBAAgB,gBAAGL,aAAa,EAAE;AAExC,MAAMM,YAAY,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,gBAAgB,CAAC;AAAA;AAACE,EAAA,CAAlDD,YAAY;AAElB,MAAME,eAAe,GAAGA,CAAA,KAAM;EAC5B,OAAO;IACLC,IAAI,EAAE;MACJC,UAAU,EAAE,KAAK;MACjBC,aAAa,EAAGC,KAAK,IAAK;QACxB,IAAI,CAACF,UAAU,GAAGE,KAAK;MACzB;IACF;EACF,CAAC;AACH,CAAC;AAED,MAAMC,iBAAiB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACrC,MAAME,SAAS,GAAGR,eAAe,EAAE;EACnCN,kBAAkB,CAACc,SAAS,CAAC;EAE7B,oBACEZ,OAAA,CAACC,gBAAgB,CAACY,QAAQ;IAACL,KAAK,EAAEI,SAAU;IAAAD,QAAA,EACzCA;EAAQ;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACiB;AAEhC,CAAC;AAACC,EAAA,GATIT,iBAAiB;AAWvB,SAASP,YAAY,EAAEO,iBAAiB;AAAG,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}